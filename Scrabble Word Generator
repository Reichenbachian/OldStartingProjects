
#include <iostream>
#include <vector>
#include <string>
#include <assert.h>
#include <fstream>
#include <algorithm>

using namespace std;

/**
* Class: Node
* Represents a node within a trie tree
*/
class Node
{
public:
    char value;             // the character value (a-z)
    bool end;               // indicates whether this node completes a word
    Node * children[26];    // represents the 26 letters in the alphabet
    bool used;

    Node(char value)
    {
    	this->used = false;
        this->value = value;
        // Initializes all of the children with NULL value
        for (int i = 0; i < 26; ++i){
            children[i] = NULL;
        }
    };
    ~Node();
};


/**
* Class: Trie
* Represents a trie tree data structure
*/
class Trie
{
public:
    Trie(){
        // Initialize the trie
        root = new Node(' ');
        root->end = true;
        root -> value = ('0');

        saver = new Node(' ');
        saver->end = true;
        saver -> value = ('0');
    };
    ~Trie();
    void addWord(string word);
    vector<string> allWords(string letters);
    bool searchForWord(string word);
    Node * getRoot();
private:
    Node * root;
    Node * saver;

};

/**
* Gets the root of the trie
* @return Node *    Pointer to the root node
*/
Node * Trie::getRoot()
{
    return root;
}

/**
* Add a word to the trie
* @param string Word to add to the trie
* @return void
*/
void Trie::addWord(string word)
{
    Node * currentNode = root;

    for (int i = 0; i < word.size(); ++i)
    {
        char currentChar = tolower(word.at(i));
        int index = currentChar - 'a';
        if (currentNode->children[index] != NULL)
        {
            // check if the current node has the current character as one of its decendants
            currentNode = currentNode->children[index];
        }
        else
        {
            // the current node doesn't have the current character as one of its decendants
            Node * newNode = new Node(currentChar);
            currentNode->children[index] = newNode;

            currentNode = newNode;
        }
        if (i == word.size() - 1)
        {
            // the last character of the word has been reached
            currentNode->end = true;
        }
    }
}

/**
* Searches for a word in the trie
* @param string The word to search in the trie
* @return bool  True if it's found, false otherwise
*/
bool Trie::searchForWord(string word)
{
	root = saver;
    Node * currentNode = saver;
    for (int i = 0; i < word.size(); ++i)
    {
        char currentChar = tolower(word.at(i));
        int index = currentChar - 'a';

        // if the current node has the current character as one of its decendants
        if (currentNode->children[index] != NULL){
            currentNode = currentNode->children[index];
        }
        else
            return false;
        // makes sure the last node is marked as an end for a word
        if (i == word.size() - 1 && !currentNode->end)
            return false;


    }
    return true;
}
bool inString(string &letters, char theChar){
	string lettersSubstring;
	for(int i = 0; i < letters.length(); i++){
		if(theChar == letters[i]){
//			cout << "letters are " << letters << " Char is " << theChar;
			letters.erase(i,1);
//			cout << "\t letters are now " << letters << endl;
			return true;
		}
	}
	return false;
}

inline const char * const BoolToString(bool b)
{
  return b ? "true" : "false";
}

vector<string> Trie::allWords(string letters){
	vector<string>allWords;
	vector<string>nonDuplicateWords;
	vector<Node*>nodeArray;
    Node * currentNode = root;
    string Word;
	Node * checker;
	string letters2;
	while(true){
		someLeft:
		for(int i = 0; i < 26; i++){
			if(currentNode->children[i] != NULL && currentNode->children[i]->used != false){
				currentNode->children[i]->used = false;
				nodeArray.push_back(currentNode);
				currentNode = currentNode->children[i];
				i = 0;
				goto someLeft;
			}
		}
		if(currentNode->value == '0'){
			for(int i = 0; i < 26; i++){
				if(currentNode->children[i]->used != false)
					goto someLeft;
			}
			break;
		}
		nodeArray.pop_back();
		currentNode = nodeArray[nodeArray.size()];
	}


    while(true){
    	stillSomeLeft:
    	checker = currentNode;
    	for(int i = 0; i < 26; ++i){
    		if(currentNode->children[i] != NULL && currentNode->children[i]->used == false && inString(letters, currentNode->children[i] -> value)){
				nodeArray.push_back(currentNode);
				Word += currentNode->children[i]->value;
				currentNode = currentNode->children[i];
				if(currentNode->end){
					allWords.push_back(Word);
//					currentNode->end = false;
					goto takeOutTrash;
				}
				i = 0;
    		}
    	}
		goto takeOutTrash;
    }
		takeOutTrash:
		letters2 = letters;
		while(true){
			if(currentNode->value != '0'){
				for(int i = 0; i < 26; i++){
					if(currentNode->children[i] != NULL && currentNode->children[i]->used == false && inString(letters2, currentNode->children[i] -> value)){
						goto stillSomeLeft;
					}
				}
				Word = Word.substr(0, Word.size()-1);
				letters += currentNode->value;
				nodeArray.pop_back();
				currentNode = nodeArray[nodeArray.size()];
				for(int i = 0; i < 26; i++){
					if(currentNode->children[i] != NULL && currentNode->children[i]->used == false){
						currentNode->children[i]->used = true;
						goto stillSomeLeft;
					}
				}
			}


			else if(currentNode->value == '0'){
				letters2 = letters;
				for(int i3 = 0; i3 < 26; i3++){
					if(currentNode->children[i3] != NULL && currentNode->children[i3]->used == false && inString(letters2, currentNode->children[i3] -> value)){

						Word = Word.substr(0, Word.size()-1);
						letters += currentNode->value;
						nodeArray.pop_back();
						currentNode = nodeArray[nodeArray.size()];
						goto stillSomeLeft;
					}
				}
				goto FINALLYDONE;
			}
		}




			FINALLYDONE:


			for (int i = 1; i < allWords.size(); i++)
			{
				bool matching = false;
				for (int j = 0; (j < i) && (matching == false); j++)if (allWords[i] == allWords[j]) matching = true;
				if (!matching) nonDuplicateWords.push_back(allWords[i]);
			}


			for(int i = 0; i < nonDuplicateWords.size(); i++){
				cout << nonDuplicateWords[i] << endl;
			}

		return allWords;
}

int main()
{

    Trie * t = new Trie();

    	  string line;
    	  ifstream myfile ("/Users/localhost/Documents/workspace/tester/src/lexicon.txt");

    	  if (myfile.is_open())
    	  {
    	    while ( getline (myfile,line) )
    	    {
    	        t->addWord(line);

    	    }
    	    myfile.close();

    	  }

    	  else cout << "Unable to open file" << endl;

    	  cout << "done building dictionaries" << endl;


    string letters;
    for(int i = 0;;i++){
		cin >> letters;
		t->allWords(letters);
    }
    return 0;
}
